
				******When to Use JavaScript var?******

				Always declare JavaScript variables with var,let, or const.

				The var keyword is used in all JavaScript code from 1995 to 2015.

				The let and const keywords were added to JavaScript in 2015.

				If you want your code to run in older browser, you must use var.




				******When to Use JavaScript const?*****

				If you want a general rule: always declare variables with const.

				If you think the value of the variable can change, use let.

				In this example, price1, price2, and total, are variable

				Example:
				const price1 = 5;
				const price2 = 6;
				let total = price1 + price2;



				*******Re-Declaring JavaScript Variables********

				If you re-declare a JavaScript variable declared with var, it will not lose its value.

				The variable carName will still have the value "Volvo" after the execution of these statements:
				Example
				var carName = "Volvo";
				var carName;



				You cannot re-declare a variable declared with let or const.

				This will not work:
				let carName = "Volvo";
				let carName;



				******const********************
				JavaScript const variables must be assigned a value when they are declared:

				Correct:
				const PI = 3.14159265359;


				Incorrect:
				const PI;
				PI = 3.14159265359;



				******When to use JavaScript const?*******

				As a general rule, always declare a variable with const unless you know that the value will change.

				Use const when you declare:

				    A new Array
				    A new Object
				    A new Function
				    A new RegExp


				*******Constant Objects and Arrays*************

				The keyword const is a little misleading.

				It does not define a constant value. It defines a constant reference to a value.

				Because of this you can NOT:

				    Reassign a constant value
				    Reassign a constant array
				    Reassign a constant object

				    But you CAN:
				    Change the elements of constant array
				    Change the properties of constant object

					**Constant Array:**
					you can change the elements of a constant array:
					Example:
						// You can create a constant array:
						const cars = ["Saab", "Volvo", "BMW"];

						// You can change an element:
						cars[0] = "Toyota";

						// You can add an element:
						cars.push("Audi");


					But you can NOT reassign the array:
					Example
						const cars = ["Saab", "Volvo", "BMW"];

						cars = ["Toyota", "Volvo", "Audi"];    // ERROR 



					**Constant Object:**
					You can change the properties of a constant object:
					Example:
						// You can create a const object:
						const car = {type:"Fiat", model:"500", color:"white"};

						// You can change a property:
						car.color = "red";

						// You can add a property:
						car.owner = "Johnson";

					But you can NOT reassign the object:
					Example:
						const car = {type:"Fiat", model:"500", color:"white"};

						car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR 



				******Bitwise************
				JavaScript uses 32-bit signed numbers.
				Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.
				~00000000000000000000000000000101 will return 11111111111111111111111111111010


				********typeof Operator******************
				You can use the JavaScript typeof operator to find the type of a JavaScript variable.

				The typeof operator returns the type of a variable or an expression:
				Example:
					typeof ""             // Returns "string"
					typeof "John"         // Returns "string"
					typeof "John Doe"     // Returns "string"


				Example:
					typeof 0              // Returns "number"
					typeof 314            // Returns "number"
					typeof 3.14           // Returns "number"
					typeof (3)            // Returns "number"
					typeof (3 + 4)        // Returns "number" 


				In JavaScript, a variable without a value, has the value undefined. The type is also undefined.
				Example
					let car;    // Value is undefined, type is undefined 





